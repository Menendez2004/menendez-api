# Scalar Types
scalar RoleName
scalar Hash
scalar DateTime
scalar UUID


#I'M GOONA WAIT FOR THE FEEBACK 
# Enums
enum ProductStatus {
    IN_STOCK
    OUT_OF_STOCK
}

enum Role {
    MANAGER
    CLIENT
}

# Common Types
type Error {
    message: String
    code: Int
}

type Address {
    street: String
    city: String
    state: String
    postalCode: String
    country: String
}

# User-related Types
type User {
    id: UUID!
    firstName: String!
    lastName: String!
    username: String!
    email: String!
    password: Hash!
    addresses: [Address]
    roleName: RoleName  
}

type AuthToken {
    token: String
    user: User
}

type FavoriteProduct {
    productId: UUID!
    userId: UUID!
}

# Product-related Types
type Product {
    id: UUID!
    name: String!
    description: String
    price: Float!
    categoryId: UUID!
    stock: Int!
    is_available: Boolean  
}

type Categories {
    id: UUID!
    name: String!
    description: String
    is_active: Boolean  
}

# Cart-related Types
type Cart {
    id: UUID!
    user_id: UUID!
    product_id: UUID!
    quantity: Int!
    created_at: DateTime!
}

# Order-related Types
type Order {
    id: UUID!
    userUUID: UUID!
    status: String!
    total: Float!
    paymentMethod: String!
    stripePaymentIntent: String
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Payment {
    id: UUID!
    order_id: UUID!
    stripe_api_version: Float
    amount: Float!
    currency: String!
    payment_status:  Boolean!
    stripe_payment_intent: String
    closed: Boolean
    createdAt: DateTime!
    updatedAt: DateTime
}

# Input Types
input AddressInput {
    street: String!
    city: String!
    state: String!
    postalCode: String!
    country: String!
}

input UserCreateInput {
    firstName: String!
    lastName: String!
    username: String!
    email: String!
    password: Hash!
    isActive: Boolean
    addresses: [AddressInput]
    roleName: RoleName  
}

input UserRegisterInput {
    firstName: String
    lastName: String
    username: String!
    email: String!
    password: Hash!
    addresses: [AddressInput]
    roleName: RoleName  
}

input LoginInput {
    email: String!
    password: Hash!
}

input ResetPasswordInput {
    resetToken: String!
    newPassword: Hash!
    repeatPassword: Hash!
}

input ProductInput {
    name: String!
    description: String
    price: Float!
    categoryId: UUID!
    stock: Int!
    is_available: Boolean  
}

input ProductLikeInput {
    id: UUID!
    product_Id: UUID!
    user_Id: UUID!
    created_at: DateTime
}

input CategoryInput {
    name: String!
    description: String!
    is_active: Boolean  
}

input CartInput {
    user_id: UUID!
    product_id: UUID!
    quantity: Int!
}

input OrderCreateInput {
    userUUID: UUID!
    products: [OrderProductInput!]!
    paymentMethod: String!
}

input OrderUpdateInput {
    status: String!
}

input OrderProductInput {
    productId: UUID!
    quantity: Int!
}

# Payment Input Types
input PaymentCreateInput {
    order_id: UUID!
    stripe_api_version: Float
    payment_intent_details: PaymentDetailsInput!
}

input PaymentDetailsInput {
    amount: Float!
    currency: String!
}

input PaymentUpdateInput {
    closed: Boolean
    payment_status:  Boolean
}

input PaymentConfirmInput {
    payment_details: PaymentCardDetailsInput!
    confirm_payment: Boolean
}

input PaymentCardDetailsInput {
    card_number: String!
    cvc: String!
    exp_month: Int!
    exp_year: Int!
}


# Query Types
type Query {
    getUsers: [User]
    getUser(id: UUID!): User
    getUserCart(id: UUID!): [Cart]
    getUserOrder(id: UUID!): [Order]
    getPaymentStatus(id: UUID!): Payment
    

}

type UserQuery {
    getInforUser: User
    getLikedProduct: [FavoriteProduct]
}

# Mutation Types
type UserMutation {
    createUser(input: UserCreateInput!): User
    login(input: LoginInput!): AuthToken!
    userRegister(input: UserRegisterInput!): User
    likedProduct(input: ProductLikeInput!): FavoriteProduct
    logout: Boolean
    initiatePasswordRecovery(email: String!): Boolean
    resetPassword(input: ResetPasswordInput!): Boolean
}

type ManagerMutation {
    createProduct(input: ProductInput!): Product
    updateProduct(id: UUID!, input: ProductInput!): Product
    deleteProduct(id: UUID!): Boolean
    createCategorie(input: CategoryInput!): Categories
    deletecategories(id: UUID!): Boolean
}

type CartMutation {
    addToCart(input: CartInput!): Cart
    updateCartItem(id: UUID!, input: CartInput!): Cart
    removeCartItem(id: UUID!): Boolean
}

type OrderMutation {
    createOrder(input: OrderCreateInput!): Order
    updateOrderStatus(id: UUID!, input: OrderUpdateInput!): Order
    deleteOrder(id: UUID!): Boolean
}

type PaymentMutation {
    createPaymentIntent(input: PaymentCreateInput!): Payment
    updatePaymentStatus(id: UUID!, input: PaymentUpdateInput!): Payment
    confirmPayment(id: UUID!, input: PaymentConfirmInput!): Payment
}


type Mutation {
    user: UserMutation
    manager: ManagerMutation
    order: OrderMutation
    cart: CartMutation
    payment: PaymentMutation
}

# Schema Definition
schema {
    query: Query
    mutation: Mutation
}